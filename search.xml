<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>From Web to App 1</title>
    <url>/2019/04/15/From-Web-To-App-1/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p><strong>FWTA</strong> is a project embraces the vision to create cross-platform mobile first applications using morden web technologies and best practices, such as <strong>Server Side Rendering (SSR), Progressive Web Application (PWA), Accelerated Mobile Pages (AMP), PRPL Pattern, Severless Backend</strong>.</p>

</blockquote>

<p>The final product of <strong>FWTA</strong> would be a cross-platform mobile progressive web app which</p>
<ul>
<li>has user experience and features close to native app</li>
<li>runs on major platforms with responsive design</li>
<li>optimizes performance on major platforms</li>
<li>is discoverable using search engine (SEO)</li>
<li>is hosted on serverless cloud infrastructure</li>
<li>runs with offline support </li>
<li>updates seamlessly</li>
<li>distribute freely without app store</li>
</ul>
<p>This is one of the article series which records thoughts and notes during my implementation of <strong>FWTA</strong>.</p>
<ul>
<li><a href="https://github.com/shadowwalker/FWTA">Github</a></li>
<li><a href="https://fwta.weiw.io/">Demo</a></li>
</ul>
<p>First things first, let’s get started and setup the project.</p>
<a id="more"></a>

<h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>So, where is this idea coming from?</p>
<p>Back in the time when I was at fifth grade in elementary school, I was given a task to create a web page for my class. That was my first experience with web “development”, I used Microsoft Front Page to create static web pages, write some HTML I learnt from books with few CSS styling (Adobe DreamWaver was starting to trend at that time, but it was too complicated for me). Quickly, I learned how to copy javascript (yes, few website uglify and minify js at that time) from other website source code to add some “features” to my static website. The biggest accomplishment I could remember is a big clock sticky to the right bottom corner of my page while scrolling. I deployed my website using ftp protocol simpliy by copy and pasting the files to the server.</p>
<p><a href="https://whatwebcando.today/">What web can do today</a> has been largely changed in the past decades, <a href="http://javascript.info/">morden JavaScript</a> also changed not only in its syntax but also the way developers work with it. <a href="https://babeljs.io/">Babel</a>, ES6 and frameworks such as <a href="https://reactjs.org/">react.js</a> and <a href="https://vuejs.org/">vue.js</a> changed the way programmers think about web development. Though browser still works with HTML(5), stylesheets and javascript, just like old days, developers no longer have to deal with large trunk of codes, instead,  they write clean, small and manageable modules, based on which to compose complicated multi function web application. The history has buried Flash, which put web app more dependent on advanced javascript techniques. The revolution does not only happen in the web frontend, <a href="https://nodejs.org/">node.js</a> enables javascript to jail break browsers and runs almost everywhere, including server or serverless backends.</p>
<p>There is no doubt that web has become stronger and anywhere, this is an achievement by putting decades of efforts from large tech companies together with W3C to standardize web experience.</p>
<p>Nowadays, it’s possible to create web app close to native app which does exactly same job. Even in cases where there are limitations for pure web app, the emerging hybrid frameworks such as <a href="https://electronjs.org/">electron.js</a>,  <a href="https://ionicframework.com/">ionic.js</a> and <a href="https://facebook.github.io/react-native/">react native</a> could come to rescue. Those frameworks have made a lot of famous application possible, such as <a href="https://code.visualstudio.com/">VS Code</a> and <a href="https://code.fb.com/android/dive-into-react-native-performance/">Facebook</a>.</p>
<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p><strong>FWTA</strong> is a demonstration of what web app can do compare to native apps, by exploring and pushing boundaries of current tools and technologies. But when it comes to implementation, I have to choose a relatively wise path to achieve the goal, my choose of frameworks and implementation is based on my experience. Here is a list of major building blocks I would use:</p>
<p><em><a href="http://javascript.info/">JavaScript</a> + <a href="https://www.typescriptlang.org/">TypeScript</a></em></p>
<p>Programing languages that runs on both backend and frontend. Intially when I heard of TypeScript, I thought it’s a bad idea, as it seems to bring back the nuisance from C++, which is what JavaScript tends to avoid. But it’s actually brilliant which gives quick hints and type check during the development, it could speed up development a lot. (I still don’t like <a href="https://palantir.github.io/tslint/">TSLint</a> though)</p>
<p><em><a href="https://nextjs.org/">Next.js</a> + <a href="https://reactjs.org/">React.js</a></em></p>
<p>Like a lot others in the community, these are my favorite frameworks so far. There are still a list of things I want to explore:</p>
<ul>
<li>Use <a href="https://amp.dev/">AMP</a> to optimize page load performance - <a href="https://github.com/zeit/next.js/tree/canary/examples/amp">example</a></li>
<li>Explore if it’s worth to use light weight <a href="https://preactjs.com/">Preact.js</a> instead of react - <a href="https://github.com/zeit/next.js/tree/canary/examples/using-preact">example</a></li>
<li>Another interesting alternative lit-html from <a href="https://www.polymer-project.org/">Polymer Project</a>, this experimental project is created by teams from Google Chrome, and the performance is great.</li>
<li>Revisit <a href="https://developers.google.com/web/fundamentals/performance/prpl-pattern/">RPRL Pattern</a> for further performance optimization.</li>
</ul>
<p>Other good options here would be <a href="https://nuxtjs.org/">Nuxt.js</a> + <a href="https://vuejs.org/">Vue.js</a>.</p>
<p>When choosing frameworks, libraries and tools, I found some good resource:</p>
<ul>
<li><a href="https://stefankrause.net/js-frameworks-benchmark8/table.html">JS Frameworks Benchmark</a> by <a href="https://www.stefankrause.net/wp/">Stefan Krause</a></li>
<li><a href="https://medium.com/@ajmeyghani/javascript-bundlers-a-comparison-e63f01f2a364">JS Bundlers Comparison</a> by <a href="https://medium.com/@ajmeyghani">AJ Meyghani</a></li>
<li><a href="https://medium.com/@ajmeyghani/javascript-frameworks-performance-comparison-c566d19ab65b">JS Frameworks Battle using benchmark above</a> by <a href="https://medium.com/@ajmeyghani">AJ Meyghani</a></li>
</ul>
<p><em><a href="https://material-ui.com/">Material-UI</a></em></p>
<p><a href="https://material.io/design/">Material Design</a> seems to be the new fashion as Google leads the trend, material-ui is a very good UI  component library implemented the design language in react. There are bunch of other great frameworks as well, sky is the limit.</p>
<p><em><a href="https://jest.io/">Jest.js</a> + <a href="https://airbnb.io/enzyme/">Enzyme</a></em></p>
<p>One benefit of utilizing modular component based concept is that it’s easy to implement tests. They make products more robust and reliable.</p>
<p>There are so many other good staff, but all the projects above are backed by strong and active open source community, enough to build confidence in production use.</p>
<p><em><a href="https://developers.google.com/web/tools/workbox/">Workbox</a></em></p>
<p>Workbox is a set of libraries and Node modules that make it easy to cache assets and take full advantage of features used to build <a href="https://developers.google.com/web/progressive-web-apps/">Progressive Web Apps</a>.</p>
<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>Init git repository.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch README.md LICENSE</span><br><span class="line">...</span><br><span class="line">git init</span><br><span class="line">git add --all</span><br><span class="line">git commit -m <span class="string">&quot;Initial commit&quot;</span></span><br><span class="line">git remote add origin git@github.com:shadowwalker/FWTA.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<p>Add <code>.gitignore</code> generated from <a href="https://www.gitignore.io/?templates=vim,node,linux,macos,windows,firebase,sublimetext,intellij+all,visualstudiocode">here</a>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch .gitignore</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h3><p>Init with yarn.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn init</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="Install-Dependencies"><a href="#Install-Dependencies" class="headerlink" title="Install Dependencies"></a>Install Dependencies</h3><p>We are going to start with <a href="https://nextjs.org/">next.js</a> and <a href="https://reactjs.org/">react.js</a>, this give you SSR by default.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add next react react-dom</span><br></pre></td></tr></table></figure>
<h2 id="First-Web-App-with-SSR"><a href="#First-Web-App-with-SSR" class="headerlink" title="First Web App with SSR"></a>First Web App with SSR</h2><h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><p>Create a <code>pages</code> folder with a <code>index.js</code> file.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir pages</span><br><span class="line"><span class="built_in">cd</span> pages</span><br><span class="line">touch index.js</span><br></pre></td></tr></table></figure>
<p>Modify index.js with following.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>FWTA first web app<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br></pre></td></tr></table></figure>
<h3 id="Scripts"><a href="#Scripts" class="headerlink" title="Scripts"></a>Scripts</h3><p>Add some scripts in <code>package.json</code> for convenience.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;dev&quot;: &quot;next&quot;,</span><br><span class="line">  &quot;build&quot;: &quot;next build&quot;,</span><br><span class="line">  &quot;start&quot;: &quot;next start&quot;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="Run-Development-Server"><a href="#Run-Development-Server" class="headerlink" title="Run Development Server"></a>Run Development Server</h3><p>Start dev server. This create a temp <code>.next</code> folder to save files compiled.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn dev</span><br></pre></td></tr></table></figure>
<p>Now you can access your SSR web app at <a href="http://localhost:3000/">localhost:3000</a>, hot reloading is enabled during development for free.</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>To recap, I have created a SSR web app running on node.js with next.js and react.js framework. You can find a snapshot commit  <a href="https://github.com/shadowwalker/FWTA/tree/b15f34922f107e2e51d1f651372760fe1ef5d8ef">here</a>.</p>
<h2 id="Next"><a href="#Next" class="headerlink" title="Next"></a>Next</h2><p>Deploy to firebase, static hosting, serverless functions, SSL and more…</p>
]]></content>
      <categories>
        <category>FWTA</category>
      </categories>
      <tags>
        <tag>Web App</tag>
        <tag>JavaScript</tag>
        <tag>PWA</tag>
      </tags>
  </entry>
  <entry>
    <title>Create React Package in Typescript in 5 Minutes</title>
    <url>/2019/03/17/Create-React-Package-in-Typescript-in-5-Minutes/</url>
    <content><![CDATA[<p><strong>Setup a react npm package to share components or other modules in 5 minutes, without getting hands dirty.</strong></p>
<p><img src="https://cdn-images-1.medium.com/max/2400/1*y35T8mhTSj992NIXwGwC6w.png" alt="react to npm"></p>
<p>A lot of tutorials online use <a href="https://webpack.js.org/">webpack</a> or even <a href="https://github.com/facebook/create-react-app">create-react-app</a> to setup a react package. There are drawbacks for those methods:</p>
<ul>
<li>The <code>babel-*</code> dependencies bundle doesn’t come for free and usually hard to understand</li>
<li><code>webpack.config.js</code> and <code>.babelrc</code> could be hard to get them right</li>
</ul>
<p>This tutorial gives you a silly simple way to create a react package without those drawbacks but the benefit from <a href="https://www.typescriptlang.org/">TypeScript</a>: build time type checking (You can opt-out this benefit by writting just JavaScript). Which means your package is born with TypeScript support.</p>
<p><strong>Jump to <a href="https://github.com/shadowwalker/react-greeting">Source Code</a>.</strong></p>
<a id="more"></a>

<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>Create folders and files</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p react-greeting/src  <span class="comment"># create folder</span></span><br><span class="line"><span class="built_in">cd</span> react-greeting  <span class="comment"># go inside the folder</span></span><br></pre></td></tr></table></figure>
<p>Initialize yarn and add dependencies</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn init -y</span><br><span class="line">yarn add -D react typescript @types/react</span><br></pre></td></tr></table></figure>
<p>Minimal setup only requires <code>react</code> and <code>typescript</code>, <code>@types/react</code> is here to make your life even easier.</p>
<p>Add <code>tsconfig.json</code> with</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;commonjs&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lib&quot;</span>: [ <span class="string">&quot;es2017&quot;</span>, <span class="string">&quot;dom&quot;</span> ],</span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span>: <span class="string">&quot;react&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;declaration&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;removeComments&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;files&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;src/index.ts&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>Optional but recommended</em></p>
<p>Add <code>README.md</code> and <code>LICENSE</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch README.md LICENSE  <span class="comment"># update content as you like</span></span><br></pre></td></tr></table></figure>
<p>Add <code>.gitignore</code> with</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node_modules&#x2F;</span><br><span class="line">&#x2F;*.js</span><br><span class="line">&#x2F;*.d.ts</span><br><span class="line">yarn-error.log</span><br></pre></td></tr></table></figure>
<p>Initialize git</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add --all</span><br><span class="line">git commit -m <span class="string">&quot;Initial commit&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="Develop"><a href="#Develop" class="headerlink" title="Develop"></a>Develop</h2><p>Create <code>src/index.ts</code> with</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Greeting <span class="keyword">from</span> <span class="string">&#x27;./Greeting&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  Greeting <span class="keyword">as</span> <span class="keyword">default</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Create <code>src/Greeting.tsx</code> with</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Props &#123;</span><br><span class="line">  name?: <span class="built_in">string</span>  <span class="comment">// who to greet?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; name=<span class="string">&#x27;world&#x27;</span> &#125;: Props) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;h1&gt;Hello &#123;name&#125;!&lt;/h1&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This creates a <code>Greeting</code> component which could pass in an optional prop <code>name</code>, then render a <code>h1</code> element with a greeting message. (Obviously!)</p>
<h2 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h2><p>Update <code>package.json</code> with <code>scripts</code> and <code>types</code> so it looks like this</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;react-greeting&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;types&quot;</span>: <span class="string">&quot;index.d.ts&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;tsc&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;@types/react&quot;</span>: <span class="string">&quot;^16.8.8&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;react&quot;</span>: <span class="string">&quot;^16.8.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;typescript&quot;</span>: <span class="string">&quot;^3.3.3333&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>scripts</code> add a convenient script to build the package, <code>types</code> indicates where to find type definition file.</p>
<p>Build package</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn build</span><br></pre></td></tr></table></figure>
<p>This builds out several <code>*.js</code> and <code>*.d.ts</code>, those are the only files which are actually needed to be packaged and published.</p>
<h2 id="Publish"><a href="#Publish" class="headerlink" title="Publish"></a>Publish</h2><p>Add <code>.npmignore</code> with</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Ignore unnecessary files</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">src&#x2F;</span><br><span class="line">tsconfig.json</span><br><span class="line">package-lock.json</span><br><span class="line">yarn.lock</span><br><span class="line">yarn-error.log</span><br></pre></td></tr></table></figure>
<p>Publish to npm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn publish --access public</span><br></pre></td></tr></table></figure>
<p>DONE~!</p>
<p><img src="https://media.giphy.com/media/26u4lOMA8JKSnL9Uk/giphy.gif" alt="DONE"></p>
<h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>Testing is not included in this post for simplicity, but there are two major tests you could do with your new component.</p>
<h3 id="Unit-Test"><a href="#Unit-Test" class="headerlink" title="Unit Test"></a>Unit Test</h3><p>Checkout <a href="https://jestjs.io/">Jest</a> and <a href="https://airbnb.io/enzyme/">Enzyme</a> to write unit test inside your package.</p>
<p>Here is an example <a href="https://github.com/shadowwalker/unstated/blob/typescript/src/index.test.tsx">unstated-typescript</a></p>
<h3 id="Integrated-Test"><a href="#Integrated-Test" class="headerlink" title="Integrated Test"></a>Integrated Test</h3><p>Test the package inside a react app using <a href="https://yarnpkg.com/lang/en/docs/cli/link/">yarn link</a> technique.</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>React</tag>
        <tag>TypeScript</tag>
        <tag>NPM</tag>
      </tags>
  </entry>
  <entry>
    <title>From Web to App 2</title>
    <url>/2019/04/17/From-Web-To-App-2/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p><strong><a href="https://weiw.io/2019/04/15/From-Web-To-App-1">FWTA</a></strong> is a project embraces the vision to create cross-platform mobile first applications using morden web technologies and best practices, such as <strong>Server Side Rendering (SSR), Progressive Web Application (PWA), Accelerated Mobile Pages (AMP), PRPL Pattern, Severless Backend</strong>.</p>

</blockquote>

<p>This is one of the article series which records thoughts and notes during my implementation of <strong>FWTA</strong>.</p>
<ul>
<li><a href="https://github.com/shadowwalker/FWTA">Github</a></li>
<li><a href="https://fwta.weiw.io/">Demo</a></li>
</ul>
<p>In the previous article, I have setup a very simple web app with next.js and react.js. It feaures hot reloading in development and SSR, and has only one DOM in the index page:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;FWTA first web app&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>In this article, I will setup cloud infrastructure, deploy and publish the web app to the world. Then continue setup with some of my favorite settings. From this point, it makes sense to use my favorite IDE or editor, a.k.a <a href="https://code.visualstudio.com/">VS Code</a>.</p>
<a id="more"></a>

<h2 id="Cloud"><a href="#Cloud" class="headerlink" title="Cloud"></a>Cloud</h2><p><em>Cloud</em> has been a popular term in the industry for years, it provides services and tools to help startups and developers to establish their business. There are a lot of cloud services providers now, and it will be more, just like the clouds on the sky.</p>
<p>I personally have some experience with <a href="https://aws.amazon.com/">AWS</a>, <a href="https://azure.microsoft.com/en-us/">Azure</a>, <a href="https://cloud.google.com/">GCP</a>, <a href="https://zeit.co/">Zeit</a>, <a href="https://firebase.google.com/">Firebase</a>, as well as cloud services providers from China, such as <a href="https://www.alibabacloud.com/">Alibaba Cloud</a>, <a href="https://intl.cloud.tencent.com/">Tencent Cloud</a>, <a href="https://www.qiniu.com/">Qi Niu</a>.</p>
<blockquote>
<p>If you’d like to run business in Chinese Market, I recommend to host your web app and purchase domain with providers from China for easier and faster compliance.</p>
</blockquote>
<p>All of the cloud servcies mentioned above are great candidates for consideration when start something new. I would use Firebase with free plan here for simplicity and keep everything under control, it’s backed by Google Cloud.</p>
<h2 id="Serverless"><a href="#Serverless" class="headerlink" title="Serverless"></a>Serverless</h2><p>In the “stone age”, people bought physical machines, put them on the rack in a clean glass sealed room. They also bought a lot of network devices, such as routers, switcher in order to turn those machines into servers. They spent a big amount of time configuring routers, switchers, DNS and paying electricity bills. And hire others to keep the machines working 24h x 7. If they still have time and money, they hire somebody else to write code for business.</p>
<p>In the “age of cloud”, large companies bought those machines and devices, put them into large warehouses, and does every single dirty but common job for you. Let you focus on writing code for business by renting you the well prepared and maintained machines. They encourage customers to use their cloud services by buying out all the machine, SSD, RAM on the market. They maximize profits by cutting the machines into multiple pieces then rent the pieces out, they call them Virtual Machines, sometimes also called Containers when cutting into even more pieces.</p>
<p>Now, in the “age of serverless cloud”, those large companies hide the process of signing contracts for those pieces of machines. You hand over your codes, they will execute them for you. Though these codes would likely to be executed on the same pieces of machines, you don’t have to touch them anymore and even not feeling they exist. Yep, this is what I am about to do.</p>
<h2 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h2><h3 id="Restructure-Source-Code"><a href="#Restructure-Source-Code" class="headerlink" title="Restructure Source Code"></a>Restructure Source Code</h3><p>Before I mess things up, I’d like to restructure source code. This will give me benefits which is not so obvious now. Simply move <code>pages</code> folder inside a new folder <code>src/app</code>. View the <a href="https://github.com/shadowwalker/FWTA/tree/32487fd20b8c35bbf680ce24522713aad29109df">new folder structure</a>.</p>
<h3 id="Update-Dependencies-and-Scripts"><a href="#Update-Dependencies-and-Scripts" class="headerlink" title="Update Dependencies and Scripts"></a>Update Dependencies and Scripts</h3><p>Update <code>package.json</code> like <a href="https://github.com/shadowwalker/FWTA/blob/fa2ba8cd04b21d33371e1b2b5dd45ff09c3f5e1c/package.json">this</a>. Remove <code>node_modules</code>, reinstall dependencies with <code>yarn install</code>.</p>
<p>Note that I moved <code>next react react-dom</code> into dev dependencies, because I will use <a href="https://nextjs.org/blog/next-8#serverless-nextjs">next.js 8 build serverless target feature</a>, which will bundle up everthing needed and there is no runtime dependencies needed from <code>node_modules</code> on next.js side.</p>
<p>The second thing to notice is I added engines configuration</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&quot;engines&quot;: &#123;</span><br><span class="line">  &quot;node&quot;: &quot;8&quot;</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>This is needed to tell firebase functions to use node.js 8 as running environment, otherwise the default version is 6. Currently only node.js 6 and 8 are supported. <a href="https://cloud.google.com/functions/docs/concepts/nodejs-10-runtime">Google just made node.js 10 available as beta on GCP Cloud Functions</a>, but not on firebase side, so hope this would be my option soon.</p>
<p>The third thing to notice is that I use <a href="https://www.npmjs.com/package/npm-run-all">npm-run-all</a> to run sequential and parallel scripts, this is the technique really works for me to organize steps and tasks, keep things nice and clean.</p>
<h3 id="Scripts-For-Release-and-Clean-Up"><a href="#Scripts-For-Release-and-Clean-Up" class="headerlink" title="Scripts For Release and Clean Up"></a>Scripts For Release and Clean Up</h3><p>Add these simple scripts <a href="https://github.com/shadowwalker/FWTA/blob/fa2ba8cd04b21d33371e1b2b5dd45ff09c3f5e1c/scripts/release.js">scripts/release.js</a> and <a href="https://github.com/shadowwalker/FWTA/blob/fa2ba8cd04b21d33371e1b2b5dd45ff09c3f5e1c/scripts/clean.js">scripts/clean.js</a>. This may not make sense yet, but what it’s trying to do is pretty clear. The former copy some files into some locations under <code>dist</code> folder to get ready for deployment, the latter cleans those folders up.</p>
<blockquote>
<p>Add <code>dist/</code> folder to .gitignore as it’s produced by release process.</p>
</blockquote>
<h2 id="Firebase-Setup"><a href="#Firebase-Setup" class="headerlink" title="Firebase Setup"></a>Firebase Setup</h2><h3 id="Create-Project"><a href="#Create-Project" class="headerlink" title="Create Project"></a>Create Project</h3><p>Go to <a href="https://firebase.google.com/">Firebase</a>, sign up free account and create new project, note down the project ID: <code>fwta-weiwio</code>.</p>
<h3 id="Add-Configuration"><a href="#Add-Configuration" class="headerlink" title="Add Configuration"></a>Add Configuration</h3><p>Add <code>.firebaserc</code> in root folder with</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;projects&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;default&quot;</span>: <span class="string">&quot;fwta-weiwio&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>This file is git ignored per my setting, so won’t appear in my repo.</p>
</blockquote>
<p>Add <code>firebase.json</code> with <a href="https://github.com/shadowwalker/FWTA/blob/fa2ba8cd04b21d33371e1b2b5dd45ff09c3f5e1c/firebase.json">this</a>. This file defines how I’m going to use firebase services and how to deploy them. There are two parts <code>hosting</code>, and <code>functions</code>. </p>
<p>Hosting is used to host static web resources, traditional websites are static <code>html</code> with optional <code>js</code> and <code>css</code>, in which case hosting service is enough. </p>
<p>But since I need SSR for better performance, I use Functions to response real http requests, and use hosting rewrite rule to rewrite traffics to corresponding serverless functions. </p>
<p>Read more about <a href="https://firebase.google.com/docs/hosting/full-config#hosting_priority_order">those rules</a>.</p>
<h3 id="Add-Dependencies"><a href="#Add-Dependencies" class="headerlink" title="Add Dependencies"></a>Add Dependencies</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add firebase-admin firebase-functions</span><br><span class="line">yarn add -D firebase-tools</span><br></pre></td></tr></table></figure>
<h2 id="Serverless-Next-js-app"><a href="#Serverless-Next-js-app" class="headerlink" title="Serverless Next.js app"></a>Serverless Next.js app</h2><p>Add <code>next.config.js</code> to <code>src/app/</code> with following</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  target: <span class="string">&#x27;serverless&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Try to build with</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn build</span><br></pre></td></tr></table></figure>
<p>Under the <code>src/app</code>, there is a new <code>.next</code> folder, which contains build output files. Inside this foler, <code>sverless/pages</code> contains serverless functions for each page, <code>static</code> folder contains static website resources (.js) which need to be put into <code>dist/_next/static</code> for firebase hosting to host them statically.</p>
<p>Read more about <a href="https://nextjs.org/blog/next-8#serverless-nextjs">Next.js 8 Serverless</a>.</p>
<h2 id="Firebase-Functions"><a href="#Firebase-Functions" class="headerlink" title="Firebase Functions"></a>Firebase Functions</h2><h3 id="Write-Functions"><a href="#Write-Functions" class="headerlink" title="Write Functions"></a>Write Functions</h3><p>Add <code>index.js</code> to new folder <code>src/functions/</code> with</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> functions = <span class="built_in">require</span>(<span class="string">&#x27;firebase-functions&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> indexPage</span><br><span class="line"><span class="keyword">let</span> errorPage</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!process.env.FUNCTION_NAME || process.env.FUNCTION_NAME === <span class="string">&#x27;IndexPage&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!indexPage) indexPage = <span class="built_in">require</span>(<span class="string">&#x27;./pages/index&#x27;</span>)</span><br><span class="line">  <span class="built_in">exports</span>[<span class="string">&#x27;IndexPage&#x27;</span>] = functions.https.onRequest(<span class="function">(<span class="params">req, res</span>) =&gt;</span> indexPage.render(req, res))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!process.env.FUNCTION_NAME || process.env.FUNCTION_NAME === <span class="string">&#x27;ErrorPage&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!errorPage) errorPage = <span class="built_in">require</span>(<span class="string">&#x27;./pages/_error&#x27;</span>)</span><br><span class="line">  <span class="built_in">exports</span>[<span class="string">&#x27;ErrorPage&#x27;</span>] = functions.https.onRequest(<span class="function">(<span class="params">req, res</span>) =&gt;</span> errorPage.render(req, res))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The code above looks more complex than the example on <a href="https://firebase.google.com/docs/functions/get-started#add-the-addmessage-function">official documentation for firebase functions</a>. It is because I uses a <a href="https://github.com/firebase/functions-samples/issues/170#issuecomment-323375462">technique to optimize performance</a>, which use a <a href="https://cloud.google.com/functions/docs/env-var#nodejs_6_nodejs_8_python_37_and_go_111">FUNCTION_NAME environment variable</a> to avoid loading unnecessary resources when only one function is triggered. As serverless functions tends to shutdown environment (docker container) after idling for a certain amount of time. It will cold start after any function is triggered, the cold start is time consuming and it would be ideal to only load things that’s needed.</p>
<h2 id="Deploy"><a href="#Deploy" class="headerlink" title="Deploy"></a>Deploy</h2><p>Deployment is easy at this point, just run <code>yarn deploy</code>. After deployment, you can find the url from firebase console to access the web app. I also hooked my custom domain, so you can see it at <a href="https://fwta.weiw.io/">fwta.weiw.io</a>. The SSL is enabled on firebase by default, but using SSL on custom domain needs extra configuration.</p>
<p>I bought my domain from <a href="https://namecheap.com/">namecheap.com</a> and used <a href="https://www.cloudflare.com/">cloudflare.com</a> for SSL, DNS and CDN. These services are awesome and the latter is free!</p>
<h2 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h2><p>It make sense to do some measurements through the development process as to analyze performance and bottle neck as I implement more and more on this app.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">weiwio:FWTA weiw$ ls -ohSR dist/<span class="built_in">functions</span>/pages</span><br><span class="line">total 1296</span><br><span class="line">-rw-r--r--  1 weiw   323K Apr 19 15:28 _error.js</span><br><span class="line">-rw-r--r--  1 weiw   323K Apr 19 15:28 index.js</span><br><span class="line"></span><br><span class="line">weiwio:FWTA weiw$ ls -ohSR dist/public/_next/static</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x  4 weiw   128B Apr 19 15:28 runtime</span><br><span class="line">drwxr-xr-x  3 weiw    96B Apr 19 15:28 -GOs-V3CpCRhUVnR5ckyh</span><br><span class="line">drwxr-xr-x  3 weiw    96B Apr 19 15:28 chunks</span><br><span class="line"></span><br><span class="line">dist/public/_next/static/runtime:</span><br><span class="line">total 56</span><br><span class="line">-rw-r--r--  1 weiw    22K Apr 19 15:28 main-6d12b443ff1de0c04a2e.js</span><br><span class="line">-rw-r--r--  1 weiw   1.5K Apr 19 15:28 webpack-a79426b5e11f0ba5879d.js</span><br><span class="line"></span><br><span class="line">dist/public/_next/static/-GOs-V3CpCRhUVnR5ckyh:</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x  5 weiw   160B Apr 19 15:28 pages</span><br><span class="line"></span><br><span class="line">dist/public/_next/static/-GOs-V3CpCRhUVnR5ckyh/pages:</span><br><span class="line">total 32</span><br><span class="line">-rw-r--r--  1 weiw   7.7K Apr 19 15:28 _error.js</span><br><span class="line">-rw-r--r--  1 weiw   2.4K Apr 19 15:28 _app.js</span><br><span class="line">-rw-r--r--  1 weiw   363B Apr 19 15:28 index.js</span><br><span class="line"></span><br><span class="line">dist/public/_next/static/chunks:</span><br><span class="line">total 368</span><br><span class="line">-rw-r--r--  1 weiw   180K Apr 19 15:28 commons.3b8a204509533087c64f.js</span><br></pre></td></tr></table></figure>
<p>Cold starts time <code>78 ms</code></p>
<p><a href="https://github.com/shadowwalker/weiw.io/raw/master/2019/04/17/From-Web-To-App-2/Lighthouse%20Report.pdf">Lighthouse report</a></p>
<ul>
<li>Performance: 100</li>
<li>Accessibility: 70</li>
<li>Best Practices: 100</li>
<li>SEO: 80</li>
</ul>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>To recap, I have setup cloud infrastructure using firebase, and successfully deploy my dummy web app to firebase hosting and serverless functions services. A snapshot commit could be found <a href="https://github.com/shadowwalker/FWTA/tree/68fe4f54b598fcc1c848aff4bd77fb75eb05f642">here</a>.</p>
<h2 id="Next"><a href="#Next" class="headerlink" title="Next"></a>Next</h2><p>Setup TypeScript support, add some UI with Material-UI to make it more like an app rather than a web page …</p>
]]></content>
      <categories>
        <category>FWTA</category>
      </categories>
      <tags>
        <tag>Web App</tag>
        <tag>JavaScript</tag>
        <tag>PWA</tag>
      </tags>
  </entry>
  <entry>
    <title>From Web to App 3</title>
    <url>/2019/04/19/From-Web-To-App-3/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p><strong><a href="https://weiw.io/2019/04/15/From-Web-To-App-1">FWTA</a></strong> is a project embraces the vision to create cross-platform mobile first applications using morden web technologies and best practices, such as <strong>Server Side Rendering (SSR), Progressive Web Application (PWA), Accelerated Mobile Pages (AMP), PRPL Pattern, Severless Backend</strong>.</p>

</blockquote>

<p><img src="https://github.com/shadowwalker/weiw.io/blob/master/2019/04/19/From-Web-To-App-3/app-bottom.png?raw=true"></p>
<p>This is one of the article series which records thoughts and notes during my implementation of <strong>FWTA</strong>.</p>
<ul>
<li><a href="https://github.com/shadowwalker/FWTA">Github</a></li>
<li><a href="https://fwta.weiw.io/">Demo</a></li>
</ul>
<p>In the previous article, I have deployed my dummy web app to firebase using its hosting and functions service. In this article, I would add some UI to make it more like an app rather than dummy web page.</p>
<a id="more"></a>

<h2 id="Targets"><a href="#Targets" class="headerlink" title="Targets"></a>Targets</h2><p>There are a lot of challenges to make a web app behave similar to native app, a few things to get started:</p>
<ul>
<li>Prevent user zoom in/out globally on the app<ul>
<li>Achievable by set <code>user-scalable=no</code> in viewport meta tag.</li>
</ul>
</li>
<li>Hide scroll bar but still able to scroll<ul>
<li><a href="https://www.geeksforgeeks.org/hide-scroll-bar-but-while-still-being-able-to-scroll-using-css/">Here is a css solution</a></li>
</ul>
</li>
<li>Disable overscroll to refresh feature in Chrome in Android<ul>
<li>Achievable by css <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior">overscroll-behavior</a></li>
<li><a href="https://developers.google.com/web/updates/2017/11/overscroll-behavior">Take control of your scroll: customizing pull-to-refresh and overflow effects</a></li>
</ul>
</li>
</ul>
<h2 id="UI-Frameworks-And-Resources"><a href="#UI-Frameworks-And-Resources" class="headerlink" title="UI Frameworks And Resources"></a>UI Frameworks And Resources</h2><blockquote>
<p>Disclaimer: I’m a non-designer.</p>
</blockquote>
<h3 id="Material"><a href="#Material" class="headerlink" title="Material"></a>Material</h3><p><a href="https://material.io/">Material Design</a> is a design system – backed by open-source code – that helps teams build high-quality digital experiences faster. It is design language introduced by Google, I know a lot people don’t like it, but as a non-designer, this might be the best I could get. On the other hand, my experience is that the beatifulness is mostly depends on how people put basic elements into harmony rather than elements themselves. And that’s why we need designers. <a href="https://material-ui.com/">Material-UI</a> is a implementation  of material design in react. Which has built components could be used easily.</p>
<h3 id="Fonts"><a href="#Fonts" class="headerlink" title="Fonts"></a>Fonts</h3><p>Font is another key point to style and beautify the app, it also has great impact on the performance. On web, a technique to use font family stack is often used to let client browser to adapt font automatically by fallbacking to the first font available. <a href="https://bitsofco.de/the-new-system-font-stack/">The New System Font Stack</a> gives a good font stack which is performance oriented by using system font first:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">font-family</span>: system-ui,</span><br><span class="line">             -apple-system,</span><br><span class="line">             BlinkMacSystemFont,</span><br><span class="line">             Microsoft YaHei,</span><br><span class="line">             Segoe UI,</span><br><span class="line">             Roboto,</span><br><span class="line">             Oxygen,</span><br><span class="line">             Ubuntu,</span><br><span class="line">             Cantarell,</span><br><span class="line">             Fira Sans,</span><br><span class="line">             Droid Sans,</span><br><span class="line">             Helvetica Neue,</span><br><span class="line">             sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>A new <code>system-ui</code> is added to the top to simplify the usage of font from system, <a href="https://caniuse.com/#search=system-ui">check availability</a>.</p>
</blockquote>
<ul>
<li><a href="https://fonts.google.com/">Google Fonts</a> - For CDN hosted free font resources.</li>
<li><a href="https://fonts.google.com/?subset=chinese-simplified">Chinese Fonts</a> - For Noto font on google fonts.</li>
<li><a href="https://www.zhihu.com/question/19911793">如何保证网页的字体在各平台都尽量显示为最高质量的黑体 - 知乎</a></li>
<li><a href="http://zenozeng.github.io/fonts.css/">跨平台中文字体解决方案 - GitHub</a></li>
<li><a href="https://ruby-china.org/topics/14005">Web 中文字体应用指南 - Ruby China</a></li>
<li><a href="https://www.websiteplanet.com/blog/best-free-fonts/">Free Fonts For Commercial Use</a></li>
</ul>
<h3 id="Icons"><a href="#Icons" class="headerlink" title="Icons"></a>Icons</h3><p>Here is list of good icons resources.</p>
<ul>
<li><a href="https://www.iconfont.cn/">IconFont</a> - A large collection of icons from designers.</li>
<li><a href="https://fontawesome.com/">FontAwesome</a> - A familiar old school pal.</li>
<li><a href="https://material.io/tools/icons/?style=round">Material Design Icons</a></li>
<li><a href="https://realfavicongenerator.net/">Real Favicon Generator</a> - For generating favicons, and other icons for PWA.</li>
<li><a href="https://github.com/oblador/react-native-vector-icons">React Native Vector Icons</a> - This if for react native, but has a very good collection of icons.</li>
</ul>
<h2 id="TypeScript-Setup"><a href="#TypeScript-Setup" class="headerlink" title="TypeScript Setup"></a>TypeScript Setup</h2><p>TypeScript help to accelerate development by providing intellisense (hint) in VS Code, and detect silly bugs during development time which would otherwise break the app in runtime. Add Dependencies:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add -D typescript @zeit/next-typescript</span><br><span class="line">yarn add -D @types/next @types/react @types/react-dom</span><br></pre></td></tr></table></figure>
<p>Add <a href="https://github.com/shadowwalker/FWTA/blob/2efbdc383f74cecf0c8ab39fb756f17d3e8a70ea/src/app/tsconfig.json">tsconfig.json</a> and <a href="https://github.com/shadowwalker/FWTA/blob/2efbdc383f74cecf0c8ab39fb756f17d3e8a70ea/src/app/.babelrc">.babelrc</a> to <code>src/app</code>, then update <a href="https://github.com/shadowwalker/FWTA/blob/2efbdc383f74cecf0c8ab39fb756f17d3e8a70ea/src/app/next.config.js">next.config.js</a> to use typescript plugin. Change file name from <code>src/app/pages/index.js</code> to <code>src/app/pages/index.tsx</code>.</p>
<h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h2><h3 id="Material-UI"><a href="#Material-UI" class="headerlink" title="Material-UI"></a>Material-UI</h3><p>I implemented a material-ui plugin for next.js called <a href="https://github.com/shadowwalker/next-mui">next-mui</a> for using material-ui with next.js SSR support. Add Dependencies:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add -D next-mui @material-ui/core@next @material-ui/styles@next @material-ui/icons@next</span><br></pre></td></tr></table></figure>
<p>Add <a href="https://github.com/shadowwalker/FWTA/blob/0454d149abed839af109251390e6da6c6cfab921/src/app/pages/_app.tsx">_app.tsx</a> and <a href="https://github.com/shadowwalker/FWTA/blob/0454d149abed839af109251390e6da6c6cfab921/src/app/pages/_document.tsx">_document.tsx</a> to <code>src/app/pages</code> as instructed in <code>next-mui</code>. </p>
<h3 id="Head-Metas-And-Manifest"><a href="#Head-Metas-And-Manifest" class="headerlink" title="Head Metas And Manifest"></a>Head Metas And Manifest</h3><p>There are bunch of things I put into head in <code>_document.tsx</code>, which should be pretty self explained. For PWA I’m going to implement later, the most important is <code>theme-color</code> and <code>manifest</code>, which defines where to find a <code>manifest.json</code> file. A good start point of those head info could be find at <a href="https://github.com/Polymer/pwa-starter-kit/blob/master/index.html">PWA Start Kit - Polymer Project</a>.</p>
<blockquote>
<p><a href="https://developers.google.com/web/fundamentals/web-app-manifest/">The Web App Manifest - Google Developers</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/Manifest">Web App Manifest - MDN</a></p>
</blockquote>
<h3 id="Favicons-And-Other-Assets"><a href="#Favicons-And-Other-Assets" class="headerlink" title="Favicons And Other Assets"></a>Favicons And Other Assets</h3><p>Design an icon or logo could be the most easy or the most tough work. Once got the logo image, the most easy way to generated multiple size icons for web app is to use <a href="https://realfavicongenerator.net/">Real Favicon Generator</a>.</p>
<p>Add correponding static icons and assets to <code>src/app/static</code> folder. </p>
<h3 id="Nav-Bar"><a href="#Nav-Bar" class="headerlink" title="Nav Bar"></a>Nav Bar</h3><p>I adapted the bottom nav bar from this <a href="https://material-ui.com/demos/bottom-navigation/">demo on material-ui.com</a>.</p>
<p>Detailed implementation could be find on this <a href="https://github.com/shadowwalker/FWTA/tree/edabf66117ce330e8d2c46a774bd9f5a89fa58c6">commit</a>. And the results looks like this. Great, this feels more like an App featuring a vertical srcoll view and a bottom navigation bar.</p>
<p><img src="https://github.com/shadowwalker/weiw.io/blob/master/2019/04/19/From-Web-To-App-3/screenshot.png?raw=true"></p>
<h2 id="Peformance"><a href="#Peformance" class="headerlink" title="Peformance"></a>Peformance</h2><p>File sizes</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">weiwio:FWTA weiw$ ls -ohSR dist/<span class="built_in">functions</span>/pages</span><br><span class="line">total 10656</span><br><span class="line">-rw-r--r--  1 weiw   887K Apr 20 21:42 index.js</span><br><span class="line">-rw-r--r--  1 weiw   886K Apr 20 21:42 explore.js</span><br><span class="line">-rw-r--r--  1 weiw   886K Apr 20 21:42 feed.js</span><br><span class="line">-rw-r--r--  1 weiw   886K Apr 20 21:42 new.js</span><br><span class="line">-rw-r--r--  1 weiw   886K Apr 20 21:42 me.js</span><br><span class="line">-rw-r--r--  1 weiw   886K Apr 20 21:42 _error.js</span><br><span class="line"></span><br><span class="line">weiwio:FWTA weiw$ ls -ohSR dist/public/_next/static</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x  4 weiw   128B Apr 20 21:42 runtime</span><br><span class="line">drwxr-xr-x  3 weiw    96B Apr 20 21:42 XYQB7Jy2lKteqMICynujp</span><br><span class="line">drwxr-xr-x  3 weiw    96B Apr 20 21:42 chunks</span><br><span class="line"></span><br><span class="line">dist/public/_next/static/runtime:</span><br><span class="line">total 200</span><br><span class="line">-rw-r--r--  1 weiw    92K Apr 20 21:42 main-06c512ec64fb9631c29a.js</span><br><span class="line">-rw-r--r--  1 weiw   1.5K Apr 20 21:42 webpack-a79426b5e11f0ba5879d.js</span><br><span class="line"></span><br><span class="line">dist/public/_next/static/XYQB7Jy2lKteqMICynujp:</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x  9 weiw   288B Apr 20 21:42 pages</span><br><span class="line"></span><br><span class="line">dist/public/_next/static/XYQB7Jy2lKteqMICynujp/pages:</span><br><span class="line">total 600</span><br><span class="line">-rw-r--r--  1 weiw   241K Apr 20 21:42 _app.js</span><br><span class="line">-rw-r--r--  1 weiw    36K Apr 20 21:42 _error.js</span><br><span class="line">-rw-r--r--  1 weiw   2.3K Apr 20 21:42 index.js</span><br><span class="line">-rw-r--r--  1 weiw   1.3K Apr 20 21:42 explore.js</span><br><span class="line">-rw-r--r--  1 weiw   1.3K Apr 20 21:42 feed.js</span><br><span class="line">-rw-r--r--  1 weiw   1.3K Apr 20 21:42 me.js</span><br><span class="line">-rw-r--r--  1 weiw   1.3K Apr 20 21:42 new.js</span><br><span class="line"></span><br><span class="line">dist/public/_next/static/chunks:</span><br><span class="line">total 224</span><br><span class="line">-rw-r--r--  1 weiw   110K Apr 20 21:42 commons.635a9eee6d171762a8dc.js</span><br></pre></td></tr></table></figure>
<p>Code start time (haven’t seen any problem with cold start)</p>
<p><a href="https://github.com/shadowwalker/weiw.io/raw/master/2019/04/19/From-Web-To-App-3/Lighthouse%20Report.pdf">Lighthouse report</a></p>
<ul>
<li>Performance: 98 - Slightly decrease as we add more react code, but still good</li>
<li>Accessibility: 63 - Decrease due to disable zoom and hide scrollbar</li>
<li>Best Practices: 100</li>
<li>SEO: 100 - Increase due to meta informantion added to head</li>
</ul>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>To recap, I have added a bottom nav bar to the web app and fixed some issues in order to make the web app behave more like an native app. The snapshot commit could be found <a href="https://github.com/shadowwalker/FWTA/tree/cb147803154915ea01d38eff688e33edac11e48a">here</a>.</p>
<h2 id="Next"><a href="#Next" class="headerlink" title="Next"></a>Next</h2><p>I will add PWA support, which makes the web app runs faster and works when offline.</p>
]]></content>
      <categories>
        <category>FWTA</category>
      </categories>
      <tags>
        <tag>Web App</tag>
        <tag>JavaScript</tag>
        <tag>PWA</tag>
      </tags>
  </entry>
  <entry>
    <title>Progressive Web App</title>
    <url>/2019/04/15/Progressive-Web-App/</url>
    <content><![CDATA[<p><img src="https://blog.ionicframework.com/wp-content/uploads/2016/05/what-is-pwa-img.png" alt="PWA"></p>
<blockquote class="blockquote-center">
<p><strong>Progressive web applications</strong> (<strong>PWAs</strong>) are <a href="https://en.wikipedia.org/wiki/Web_application">web applications</a> that load like regular <a href="https://en.wikipedia.org/wiki/Web_page">web pages</a> or <a href="https://en.wikipedia.org/wiki/Website">websites</a> but can offer the user functionality such as <a href="https://en.wikipedia.org/wiki/Online_and_offline#Offline_browsing">working offline</a>, <a href="https://en.wikipedia.org/wiki/Push_technology">push notifications</a>, and device hardware access traditionally available only to <a href="https://en.wikipedia.org/wiki/Native_(computing)">native</a> applications. PWAs combine the flexibility of the <a href="https://en.wikipedia.org/wiki/Internet">web</a> with the experience of a native application.</p>
<p><em><a href="https://en.wikipedia.org/wiki/Progressive_web_applications">Wikipedia</a></em></p>

</blockquote>

<p>In short, PWA makes web app experience close to native apps, plus the following features:</p>
<a id="more"></a>

<ul>
<li><strong>Cross platform</strong> - In the mobile first world, PWA can run wherever Chrome can run.</li>
<li><strong>Progressive</strong> - Works for every user, regardless of browser choice because it’s built with progressive enhancement as a core tenet.</li>
<li><strong>Responsive</strong> - Fits any form factor: desktop, mobile, tablet, or whatever is next.</li>
<li><strong>Connectivity independent</strong> - Enhanced with service workers to work offline or on low-quality networks.</li>
<li><strong>App-like</strong> - Feels like an app, because the app shell model separates the application <em>functionality</em> from application<em>content</em> .</li>
<li><strong>Fresh</strong> - Always up-to-date thanks to the <a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers">service worker</a> update process.</li>
<li><strong>Safe</strong> - Served via HTTPS to prevent snooping and to ensure content hasn’t been tampered with.</li>
<li><strong>Discoverable</strong> - Is identifiable as an “application” thanks to <a href="https://developers.google.com/web/updates/2014/11/Support-for-installable-web-apps-with-webapp-manifest-in-chrome-38-for-Android">W3C manifest</a> and <a href="https://developers.google.com/web/fundamentals/instant-and-offline/service-worker/registration">service worker registration</a> scope, allowing search engines to find it.</li>
<li><strong>Re-engageable</strong> - Makes re-engagement easy through features like push notifications.</li>
<li><strong>Installable</strong> - Allows users to add apps they find most useful to their home screen without the hassle of an app store.</li>
<li><strong>Linkable</strong> - Easily share the application via URL, does not require complex installation.</li>
</ul>
<blockquote>
<p><a href="https://developers.google.com/web/fundamentals/codelabs/your-first-pwapp/">What is a Progressive Web App?</a></p>
</blockquote>
<p><strong>Capabilities</strong></p>
<p>Check and compare the capabilities that web and native apps can do: <a href="https://whatwebcando.today/">What Web Can Do Today</a>.</p>
<p><strong>Examples</strong></p>
<ul>
<li><a href="https://events.google.com/io2016/">Google IO 2016</a></li>
<li><a href="https://www.google.com/maps?force=tt&source=ttpwa">Google Maps</a></li>
<li><a href="https://m.weibo.cn/beta">Sina Weibo</a></li>
</ul>
<p><a href="https://appsco.pe/">Appsco PWA Directory</a></p>
<h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><p>There are three components to create a PWA:</p>
<ul>
<li>Register scripts - for service worker registration on the client browser</li>
<li>Service worker - for <code>fetch</code>, <code>install</code> and other event handling</li>
<li>Manifest - metadata for app discoverable, icons and additional information</li>
</ul>
<h2 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h2><p>A <a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">service worker</a> is a type of <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">web worker</a>. It’s essentially a JavaScript file that runs separately from the main browser thread, <strong>intercepting network requests</strong>, caching or retrieving resources from the cache, and delivering push messages.</p>
<p>Basically, service worker works as middle man between client browser and server on the other hand of the internet.</p>
<h3 id="Register"><a href="#Register" class="headerlink" title="Register"></a>Register</h3><p>The following script should be placed in every page of the web app in order to register service worker.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;serviceWorker&#x27;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    navigator.serviceWorker.register(<span class="string">&#x27;/service-worker.js&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://developers.google.com/web/fundamentals/primers/service-workers/registration">Service Worker Registration</a></p>
</blockquote>
<p><em>Key Points</em></p>
<ul>
<li>Delay registration after page load</li>
<li><code>.register</code> returns a promise</li>
<li><code>.register</code> can take optional second parameter for options, such as <code>&#123; scope: &#39;/&#39; &#125;</code>. There is one limit, scope can only be at the same path level or sub level, not parent level.</li>
</ul>
<h3 id="Develop"><a href="#Develop" class="headerlink" title="Develop"></a>Develop</h3><p>In <code>service-worker.js</code>, handle different type of events:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Listen for install event, set callback</span></span><br><span class="line">self.addEventListener(<span class="string">&#x27;install&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Perform some task</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">self.addEventListener(<span class="string">&#x27;activate&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Perform some task</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://developers.google.com/web/ilt/pwa/introduction-to-service-worker#installation">Introduction to Service Worker</a></p>
</blockquote>
<h3 id="Workbox"><a href="#Workbox" class="headerlink" title="Workbox"></a>Workbox</h3><p><a href="https://developers.google.com/web/tools/workbox/">Workbox</a> could be used to help with common cache load use cases.</p>
<h2 id="Manifest"><a href="#Manifest" class="headerlink" title="Manifest"></a>Manifest</h2><p>Add <code>link</code> to <code>head</code> in HTML DOM</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;manifest&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/manifest.json&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Example <code>manifest.json</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;HackerWeb&quot;,</span><br><span class="line">  &quot;short_name&quot;: &quot;HackerWeb&quot;,</span><br><span class="line">  &quot;start_url&quot;: &quot;.&quot;,</span><br><span class="line">  &quot;display&quot;: &quot;standalone&quot;,</span><br><span class="line">  &quot;background_color&quot;: &quot;#fff&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;A simply readable Hacker News app.&quot;,</span><br><span class="line">  &quot;icons&quot;: [&#123;</span><br><span class="line">    &quot;src&quot;: &quot;images&#x2F;touch&#x2F;homescreen48.png&quot;,</span><br><span class="line">    &quot;sizes&quot;: &quot;48x48&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;image&#x2F;png&quot;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    &quot;src&quot;: &quot;images&#x2F;touch&#x2F;homescreen72.png&quot;,</span><br><span class="line">    &quot;sizes&quot;: &quot;72x72&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;image&#x2F;png&quot;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    &quot;src&quot;: &quot;images&#x2F;touch&#x2F;homescreen96.png&quot;,</span><br><span class="line">    &quot;sizes&quot;: &quot;96x96&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;image&#x2F;png&quot;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    &quot;src&quot;: &quot;images&#x2F;touch&#x2F;homescreen144.png&quot;,</span><br><span class="line">    &quot;sizes&quot;: &quot;144x144&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;image&#x2F;png&quot;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    &quot;src&quot;: &quot;images&#x2F;touch&#x2F;homescreen168.png&quot;,</span><br><span class="line">    &quot;sizes&quot;: &quot;168x168&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;image&#x2F;png&quot;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    &quot;src&quot;: &quot;images&#x2F;touch&#x2F;homescreen192.png&quot;,</span><br><span class="line">    &quot;sizes&quot;: &quot;192x192&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;image&#x2F;png&quot;</span><br><span class="line">  &#125;],</span><br><span class="line">  &quot;related_applications&quot;: [&#123;</span><br><span class="line">    &quot;platform&quot;: &quot;play&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;https:&#x2F;&#x2F;play.google.com&#x2F;store&#x2F;apps&#x2F;details?id&#x3D;cheeaun.hackerweb&quot;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/Manifest">Web App Manifest MDN</a></li>
<li><a href="https://developers.google.com/web/fundamentals/web-app-manifest/">The Web App Manifest Google</a></li>
</ol>
</blockquote>
<h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><ol>
<li><a href="https://codelabs.developers.google.com/codelabs/your-first-pwapp">Google Code Labs</a></li>
<li><a href="https://developers.google.com/web/ilt/pwa/">Progressive Web Apps Training</a></li>
<li><a href="https://serviceworke.rs/">Service Worker Cookbook</a></li>
<li><a href="https://developers.google.com/web/ilt/pwa/introduction-to-progressive-web-app-architectures">PWA Architectures</a></li>
</ol>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web App</tag>
        <tag>JavaScript</tag>
        <tag>PWA</tag>
      </tags>
  </entry>
  <entry>
    <title>From Web to App 4</title>
    <url>/2019/04/22/From-Web-To-App-4/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p><strong><a href="https://weiw.io/2019/04/15/From-Web-To-App-1">FWTA</a></strong> is a project embraces the vision to create cross-platform mobile first applications using morden web technologies and best practices, such as <strong>Server Side Rendering (SSR), Progressive Web Application (PWA), Accelerated Mobile Pages (AMP), PRPL Pattern, Severless Backend</strong>.</p>

</blockquote>

<p>This is one of the article series which records thoughts and notes during my implementation of <strong>FWTA</strong>.</p>
<ul>
<li><a href="https://github.com/shadowwalker/FWTA">Github</a></li>
<li><a href="https://fwta.weiw.io/">Demo</a></li>
</ul>
<p>In the previous article, I have added some UI to the web app to make it more like a native app. I will add PWA support to achieve the goals below:</p>
<ul>
<li>Add web app to home screen and launch it just like other apps</li>
<li>Completely runs when offline</li>
<li>Performance optimize using all the PWA powers with caches</li>
</ul>
<p>I wrote a <a href="https://weiw.io/2019/04/15/Progressive-Web-App/">blog</a> before to introduce PWA, now I would like to put those knowledge into action.</p>
<a id="more"></a>

<h2 id="Zero-Config-PWA-Plugin-For-Next-js"><a href="#Zero-Config-PWA-Plugin-For-Next-js" class="headerlink" title="Zero Config PWA Plugin For Next.js"></a>Zero Config PWA Plugin For Next.js</h2><p>PWA is nice, but getting it to work correctly and elegantly is not that easy. I have spent a lot of time figuring out how things work under the hood and how to use <a href="https://developers.google.com/web/tools/workbox/">workbox</a>. Then I finally came up with an elegant solution myself, <a href="https://github.com/shadowwalker/next-pwa">next-pwa</a>, which allows me to add PWA support on a next.js app cleanly and easily.</p>
<h2 id="PWA-Support"><a href="#PWA-Support" class="headerlink" title="PWA Support"></a>PWA Support</h2><p>With the plugin, add PWA is as easy as add <code>withPWA</code> to <code>next.config.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> withTypescript = <span class="built_in">require</span>(<span class="string">&#x27;@zeit/next-typescript&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> withPWA = <span class="built_in">require</span>(<span class="string">&#x27;next-pwa&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = withPWA(withTypescript(&#123;</span><br><span class="line">  target: <span class="string">&#x27;serverless&#x27;</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>
<p>Also, add one line in release script to copy the service worker and precache script to deployment folder. Now the web app will have full PWA support and could run offline.</p>
<p>One big step here is that cold start is not a problem anymore, because I use workbox to implement a pattern called <code>Stale While Revalidate</code>. Which return the cache copy of the web app first upon request, and send http request to server to refresh the cache content on the background.</p>
<p><img src="https://developers.google.com/web/tools/workbox/images/modules/workbox-strategies/stale-while-revalidate.png"></p>
<blockquote>
<p>Image from <a href="https://developers.google.com/web/tools/workbox/modules/workbox-strategies">Workbox Docs</a></p>
</blockquote>
<p>Therefore, the user only feels snapy page load instead of waiting for http request to complete fetching resources. Next time the user open the app, the refreshed cache is used, this process also eliminates the need to update the app constantly, better than native app!</p>
<h2 id="Peformance"><a href="#Peformance" class="headerlink" title="Peformance"></a>Peformance</h2><p>File sizes remains unchanged</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">weiwio:FWTA weiw$ ls -ohSR dist/<span class="built_in">functions</span>/pages</span><br><span class="line">total 10656</span><br><span class="line">-rw-r--r--  1 weiw   888K Apr 24 22:03 index.js</span><br><span class="line">-rw-r--r--  1 weiw   886K Apr 24 22:03 explore.js</span><br><span class="line">-rw-r--r--  1 weiw   886K Apr 24 22:03 feed.js</span><br><span class="line">-rw-r--r--  1 weiw   886K Apr 24 22:03 new.js</span><br><span class="line">-rw-r--r--  1 weiw   886K Apr 24 22:03 me.js</span><br><span class="line">-rw-r--r--  1 weiw   886K Apr 24 22:03 _error.js</span><br><span class="line"></span><br><span class="line">weiwio:FWTA weiw$ ls -ohSR dist/public/_next/static</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x  4 weiw   128B Apr 24 22:03 runtime</span><br><span class="line">drwxr-xr-x  3 weiw    96B Apr 24 22:03 XU3iKTvfpizCbGajCFphN</span><br><span class="line">drwxr-xr-x  3 weiw    96B Apr 24 22:03 chunks</span><br><span class="line"></span><br><span class="line">dist/public/_next/static/runtime:</span><br><span class="line">total 200</span><br><span class="line">-rw-r--r--  1 weiw    92K Apr 24 22:03 main-06c512ec64fb9631c29a.js</span><br><span class="line">-rw-r--r--  1 weiw   1.5K Apr 24 22:03 webpack-a79426b5e11f0ba5879d.js</span><br><span class="line"></span><br><span class="line">dist/public/_next/static/XU3iKTvfpizCbGajCFphN:</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x  9 weiw   288B Apr 24 22:03 pages</span><br><span class="line"></span><br><span class="line">dist/public/_next/static/XU3iKTvfpizCbGajCFphN/pages:</span><br><span class="line">total 600</span><br><span class="line">-rw-r--r--  1 weiw   241K Apr 24 22:03 _app.js</span><br><span class="line">-rw-r--r--  1 weiw    36K Apr 24 22:03 _error.js</span><br><span class="line">-rw-r--r--  1 weiw   2.3K Apr 24 22:03 index.js</span><br><span class="line">-rw-r--r--  1 weiw   1.3K Apr 24 22:03 explore.js</span><br><span class="line">-rw-r--r--  1 weiw   1.3K Apr 24 22:03 feed.js</span><br><span class="line">-rw-r--r--  1 weiw   1.3K Apr 24 22:03 me.js</span><br><span class="line">-rw-r--r--  1 weiw   1.3K Apr 24 22:03 new.js</span><br><span class="line"></span><br><span class="line">dist/public/_next/static/chunks:</span><br><span class="line">total 224</span><br><span class="line">-rw-r--r--  1 weiw   110K Apr 24 22:03 commons.635a9eee6d171762a8dc.js</span><br></pre></td></tr></table></figure>
<p>Code start time is not a problem at this point.</p>
<p><a href="https://github.com/shadowwalker/weiw.io/raw/master/2019/04/22/From-Web-To-App-4/Lighthouse%20Report.pdf">Lighthouse report</a></p>
<ul>
<li>Performance: 97</li>
<li>Accessibility: 63</li>
<li>Best Practices: 100</li>
<li>SEO: 100</li>
<li>PWA: 100 - Nice!</li>
</ul>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>The snapshot commit could be find <a href="https://github.com/shadowwalker/FWTA/tree/25c801e275974a43927f11a1eb43d149df2a11fa">here</a>.</p>
<h2 id="Next"><a href="#Next" class="headerlink" title="Next"></a>Next</h2><p>Global State Management, firebase authentication, firebase firestore …</p>
]]></content>
      <categories>
        <category>FWTA</category>
      </categories>
      <tags>
        <tag>Web App</tag>
        <tag>JavaScript</tag>
        <tag>PWA</tag>
      </tags>
  </entry>
  <entry>
    <title>From Web to App 5</title>
    <url>/2019/04/24/From-Web-To-App-5/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p><strong><a href="https://weiw.io/2019/04/15/From-Web-To-App-1">FWTA</a></strong> is a project embraces the vision to create cross-platform mobile first applications using morden web technologies and best practices, such as <strong>Server Side Rendering (SSR), Progressive Web Application (PWA), Accelerated Mobile Pages (AMP), PRPL Pattern, Severless Backend</strong>.</p>

</blockquote>

<p>This is one of the article series which records thoughts and notes during my implementation of <strong>FWTA</strong>.</p>
<ul>
<li><a href="https://github.com/shadowwalker/FWTA">Github</a></li>
<li><a href="https://fwta.weiw.io/">Demo</a></li>
</ul>
<p>In the previous article, I have deployed my web app to firebase using its hosting and functions service. In this article, I would add some UI to make it more like an app rather than dummy web page.</p>
<a id="more"></a>]]></content>
      <categories>
        <category>FWTA</category>
      </categories>
      <tags>
        <tag>Web App</tag>
        <tag>JavaScript</tag>
        <tag>PWA</tag>
      </tags>
  </entry>
</search>
